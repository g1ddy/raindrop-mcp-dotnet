# generate-docs.ps1
#
# This script uses reflection to scan the Mcp.dll assembly for tools
# and generates a Markdown representation of them.

param (
    [string]$mcpAssemblyPath = ".\src\Mcp\bin\Debug\net8.0\RaindropMcp.dll",
    [string]$mcpProtocolAssemblyPath = ".\src\Mcp\bin\Debug\net8.0\ModelContextProtocol.Core.dll",
    [string]$outputPath = ".\docs\REFERENCE.md"
)

# 1. Load the assemblies
try {
    [System.Reflection.Assembly]::LoadFrom((Resolve-Path $mcpProtocolAssemblyPath))
    [System.Reflection.Assembly]::LoadFrom((Resolve-Path $mcpAssemblyPath))
}
catch {
    Write-Error "Failed to load assemblies: $_"
    exit 1
}

# 2. Find all tool methods using reflection
$toolMethods = [AppDomain]::CurrentDomain.GetAssemblies() `
    | ForEach-Object { $_.GetTypes() } `
    | Where-Object { $_.GetCustomAttributes([ModelContextProtocol.Server.McpServerToolTypeAttribute], $false).Length -gt 0 } `
    | Sort-Object -Property BaseType, FullName | ForEach-Object { $_.GetMethods() | Sort-Object -Property Name -Descending } `
    | Where-Object { $_.GetCustomAttributes([ModelContextProtocol.Server.McpServerToolAttribute], $false).Length -gt 0 }

# 3. Generate Markdown content
$markdown = @("### **MCP Tools**")
$markdown += "_This section is auto-generated by the `scripts/generate-docs.ps1` script. Do not edit it manually._"
$markdown += ""

foreach ($method in $toolMethods) {
    $toolAttribute = $method.GetCustomAttributes([ModelContextProtocol.Server.McpServerToolAttribute], $false)[0]
    $descriptionAttribute = $method.GetCustomAttributes([System.ComponentModel.DescriptionAttribute], $false) | Select-Object -First 1

    $toolName = if ($toolAttribute.Title) { $toolAttribute.Title } else { $method.Name }
    $toolDescription = if ($descriptionAttribute) { $descriptionAttribute.Description } else { "" }

    $parameters = $method.GetParameters() | ForEach-Object { "[$($_.Name)]" } | Join-String -Separator " "

    $markdown += "#### ``$($toolName)``"
    $markdown += "- **Description:** $toolDescription"
    $markdown += "- **Usage:** ``$($method.Name) $($parameters)``"
    $markdown += ""
}

# 4. Read the existing reference file and replace the tools section
Write-Host "Updating documentation file: $outputPath"
$referenceContent = Get-Content $outputPath -Raw

$startMarker = "### **MCP Tools**"
$endMarker = "---"

$startIndex = $referenceContent.IndexOf($startMarker)
$endIndex = $referenceContent.IndexOf($endMarker, $startIndex)

$part1 = $referenceContent.Substring(0, $startIndex)
$part2 = $referenceContent.Substring($endIndex)

$newContent = $part1 + ($markdown | Out-String) + $part2

$newContent | Set-Content $outputPath

Write-Host "Documentation generation complete!"
